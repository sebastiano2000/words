{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp-win10\\\\Desktop\\\\task\\\\client\\\\src\\\\context\\\\GlobalContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // initail state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initailState = {\n  questions: [],\n  progressBar: 1\n};\nexport const GlobalContext = /*#__PURE__*/React.createContext(initailState);\nexport const GlobalContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n\n  /*\r\n    questions: array containt 10 questions each question have\r\n    word - pos [correct Answer] - choose [user answer]- score [ 10 [if choose correct answer] or o ]\r\n  */\n  const [questions, setQuestions] = useState([]); //progress bar refer number of questions which are answered\n\n  const [progressBar, setProgressBar] = useState(1);\n  /**\r\n   * method:startNewQuizz\r\n   * description:connect with back and get array of 10 questions and set questions state and progressBar state\r\n   */\n\n  const getWords = async () => {\n    await fetch(\"http://localhost:5000/getWords\", {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => {\n      if (resp.ok) {\n        let words = resp.body,\n            counter = 1;\n        words.forEach(element => {\n          element.id = counter;\n          counter++;\n        });\n        console.log(words);\n        setQuestions(words);\n      }\n\n      throw Response;\n    }).catch(err => console.log(\"error in fetch words list\"));\n    setProgressBar(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      questions,\n      progressBar,\n      setProgressBar,\n      getWords\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalContextProvider, \"gEYxRv9dkS+C3ubK01Vp76utQpg=\");\n\n_c = GlobalContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"names":["React","useState","initailState","questions","progressBar","GlobalContext","createContext","GlobalContextProvider","children","setQuestions","setProgressBar","getWords","fetch","method","headers","then","resp","ok","words","body","counter","forEach","element","id","console","log","Response","catch","err"],"sources":["C:/Users/hp-win10/Desktop/task/client/src/context/GlobalContext.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// initail state\r\nconst initailState = { questions: [], progressBar: 1 };\r\nexport const GlobalContext = React.createContext(initailState);\r\n\r\nexport const GlobalContextProvider = ({ children }) => {\r\n  /*\r\n    questions: array containt 10 questions each question have\r\n    word - pos [correct Answer] - choose [user answer]- score [ 10 [if choose correct answer] or o ]\r\n  */\r\n  const [questions, setQuestions] = useState([]);\r\n  //progress bar refer number of questions which are answered\r\n  const [progressBar, setProgressBar] = useState(1);\r\n\r\n  /**\r\n   * method:startNewQuizz\r\n   * description:connect with back and get array of 10 questions and set questions state and progressBar state\r\n   */\r\n    const getWords = async () => {\r\n        await fetch (\"http://localhost:5000/getWords\", \r\n            {\r\n               method: 'GET',\r\n               headers: {\r\n                'Content-Type': 'application/json',\r\n                },\r\n            }).then((resp) => {\r\n                if (resp.ok) {\r\n                    let words = resp.body,\r\n                    counter = 1;\r\n                    words.forEach((element) => {\r\n                        element.id = counter;\r\n                        counter++;\r\n                    });\r\n\r\n                    console.log(words);\r\n                    setQuestions(words);\r\n                }\r\n                throw Response;\r\n              }).catch((err) => console.log(\"error in fetch words list\"));\r\n\r\n        setProgressBar(0);\r\n    }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{ questions, progressBar, setProgressBar, getWords }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;EAAEC,SAAS,EAAE,EAAb;EAAiBC,WAAW,EAAE;AAA9B,CAArB;AACA,OAAO,MAAMC,aAAa,gBAAGL,KAAK,CAACM,aAAN,CAAoBJ,YAApB,CAAtB;AAEP,OAAO,MAAMK,qBAAqB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;;EACrD;AACF;AACA;AACA;EACE,MAAM,CAACL,SAAD,EAAYM,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C,CALqD,CAMrD;;EACA,MAAM,CAACG,WAAD,EAAcM,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;EAEA;AACF;AACA;AACA;;EACI,MAAMU,QAAQ,GAAG,YAAY;IACzB,MAAMC,KAAK,CAAE,gCAAF,EACP;MACGC,MAAM,EAAE,KADX;MAEGC,OAAO,EAAE;QACR,gBAAgB;MADR;IAFZ,CADO,CAAL,CAMCC,IAND,CAMOC,IAAD,IAAU;MACd,IAAIA,IAAI,CAACC,EAAT,EAAa;QACT,IAAIC,KAAK,GAAGF,IAAI,CAACG,IAAjB;QAAA,IACAC,OAAO,GAAG,CADV;QAEAF,KAAK,CAACG,OAAN,CAAeC,OAAD,IAAa;UACvBA,OAAO,CAACC,EAAR,GAAaH,OAAb;UACAA,OAAO;QACV,CAHD;QAKAI,OAAO,CAACC,GAAR,CAAYP,KAAZ;QACAT,YAAY,CAACS,KAAD,CAAZ;MACH;;MACD,MAAMQ,QAAN;IACD,CAnBD,EAmBGC,KAnBH,CAmBUC,GAAD,IAASJ,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAnBlB,CAAN;IAqBAf,cAAc,CAAC,CAAD,CAAd;EACH,CAvBD;;EAyBF,oBACE,QAAC,aAAD,CAAe,QAAf;IACE,KAAK,EAAE;MAAEP,SAAF;MAAaC,WAAb;MAA0BM,cAA1B;MAA0CC;IAA1C,CADT;IAAA,UAGGH;EAHH;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CA7CM;;GAAMD,qB;;KAAAA,qB"},"metadata":{},"sourceType":"module"}